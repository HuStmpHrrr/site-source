first: 钟晟
last: 胡
emails:
  - use: 个人
    address: fdhzs2010 the-symbol hotmail.com
  - use: 学校
    address: zhong.s.hu the-symbol mail.mcgill.ca
social:
  linkedin: https://www.linkedin.com/in/jasonhuzs/
  github: https://github.com/HuStmpHrrr
  gitlab: https://gitlab.com/JasonHuZS
  stack-overflow: https://stackoverflow.com/users/3040064/jason-hu
  zhihu: https://www.zhihu.com/people/jason-hu-42-79/activities
description: >-
  我现在是<a href="https://www.cs.mcgill.ca/">麦吉尔大学</a>的博士研究生，我的导师是<a
  href="https://www.cs.mcgill.ca/~bpientka/" class="keep-space">Brigitte Pientka</a>教
  授。我此前在<a href="https://plg.uwaterloo.ca/">滑铁卢大学</a>读计算机的数学硕士，导
  师是<a href="https://plg.uwaterloo.ca/~olhotak/" class="keep-space">Ondřej
  Lhoták</a>教授。本科在<a href="http://www.fudan.edu.cn/">复旦大学</a>。

  现在，我主要学习编程语言，形式证明和类型理论，用到<a
  href="https://coq.inria.fr/">Coq</a>和<a
  href="https://wiki.portal.chalmers.se/agda/pmwiki.php">Agda</a>等工具。我的研究方向
  属于计算机科学和数学的交叉方向，涉及到探索计算机的数学本质。其中，类型理论是非经典数
  学理论，是不同于集合论的数学基础，是一种构造数学。在哲学里，这类数学被称作数学直觉主
  义。我本人认为这个翻译相当烂。

  我的学习范围非常广泛，每个阶段的学习内容都不尽相同。尽管当前学习的是相当理论化的数学
  和计算机，但是在工作时主要是调试分布式程序提升实时效率；也没少调过奇怪的bug，是非常
  工程化的。本科后两年主要学习控制理论和机器人学。计算机科学的基础是本科时自学的。初高
  学过数学、物理和化学竞赛，有一些奖。

  我从2020年九月开始拿加拿大自然科学与工程研究会（NSERC）的奖学金。

  我反对996工作制 <a href="https://996.icu"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a>。

education:
  - school: 麦吉尔大学
    location: 加拿大，魁北克，蒙特利尔
    degree: 哲学博士
    subject: 计算机科学
    grade: 4.0/4.0
    span:
      from:
        month: 9
        year: 2019
      to: present
    courses:
      - code: COMP 550
        name: Natural Language Processing
        report: /asset/pdf/comp550.pdf
      - code: COMP 520
        name: Compiler Design
        source: https://github.com/HuStmpHrrr/GoLite2LLVM
        report: /asset/pdf/comp520.pdf
      - code: COMP 596
        name: Topics in Computer Science 3 (Theoretical Foundations of Reliable Meta-programming)
        report: /asset/pdf/comp596.pdf
      - code: COMP 700
        name: Comprehensive Examination
        report: /asset/pdf/comp-exam.pdf
      - code: IFT 6172
        name: Semantics of programming languages (蒙特利尔大学)
        report: /asset/pdf/ift6172.pdf
        source: https://gitlab.com/JasonHuZS/typer/-/tree/tp/ift6172-2020
      - code: COMP 701
        name: Thesis Proposal and Area Examination
        report: /asset/pdf/proposal.pdf
        slides: /asset/pdf/proposal-slides.pdf

  - school: 滑铁卢大学
    location: 加拿大，安大略省，滑铁卢
    degree: 数学硕士
    subject: 计算机科学
    grade: 94.4%
    span:
      from:
        month: 9
        year: 2017
      to:
        month: 8
        year: 2019
    thesis:
      title: Decidability and Algorithmic Analysis of Dependent Object Types (DOT)
      description: >-
        研究DOT运算子的（不可）判定性和算法性质。
      link: https://uwspace.uwaterloo.ca/handle/10012/14964
      code: https://gitlab.com/JasonHuZS/AlgDotCalculus
      slides: /asset/thesis-prep
      abstract: >-
        Dependent Object Types, or DOT, is a family of calculi developed to study the
        Scala programming language. These calculi have path dependent types as a
        feature, and potentially intersection types, union types and recursive
        types. So far, the study of DOT calculi mostly focuses on the soundness proof,
        which does not directly contribute to development of compilers. This thesis
        presents a detailed investigation of decidability and algorithmic properties
        of the family of DOT calculi.

        In decidability analysis, the undecidability of subtyping of several calculi
        is formally established, including the D<: and D∧ calculi. Prior to this
        investigation, the undecidability of subtyping of all DOT calculi including
        D<: was open. Decidability analysis puts emphasis on a particular form of
        subtyping rules, called normal form. It turns out that a normal form
        definition is not only as expressive, but also more suggestive than the
        original definition. A conceptual device, called small-step analysis, is
        introduced to assist converting a usual definition of subtyping to its normal
        form definition. Moreover, decidability analysis gives direct contributions to
        the algorithmic analysis, by revealing two decidable fragments of D<: in
        declarative form, called the kernels. Decidability analysis also suggests a
        novel subtyping algorithm framework, stare-at subtyping. Stare-at subtyping
        and an existing algorithm are shown to be sound and complete w.r.t. their
        corresponding kernels.

        In algorithmic analysis, stare-at subtyping is extended to other calculi, with
        more features than D<:, including D∧, μDART and jDOT. In μDART and jDOT,
        bi-directional type assignment algorithms are developed. The algorithms
        developed in this thesis are all shown to be sound with respect to their
        target calculi and terminating.

        During the development of the algorithms, analysis shows a number of ways in
        which the Wadlerfest DOT calculus does not directly correspond to the Scala
        language, while substantially increases the difficulties of algorithmic
        design. jDOT, therefore, is developed as an alternative formalization of
        Scala.

    courses:
      - code: CS 341
        name: Algorithms
      - code: CS 745
        name: Computer-Aided Verification
      - code: CS 766
        name: Theory of Quantum Information
        report: /asset/pdf/766.pdf
      - code: ECE 653
        name: Software Testing, Quality Assurance and Maintenance
      - code: CS 860
        name: Advanced Topics in Algorithms and Complexity
        report: /asset/pdf/860.pdf

  - school: 复旦大学
    location: 上海
    degree: 理学学士
    subject: 电子工程
    grade: 3.35/4.0
    span:
      from:
        month: 9
        year: 2010
      to:
        month: 7
        year: 2014

publications:
  - title: A Categorical Normalization Proof for the Modal Lambda-Calculus
    appearance: MFPS'22
    year: 2022
    authors: Jason Hu and Brigitte Pientka
    pdf: https://arxiv.org/pdf/2211.12318.pdf
    artifact: Kripke-style/
    slides: /asset/slides/mfps22.pdf
    
  - title: A Category Theoretic View of Contextual Types
    appearance: ToCL (May 22)
    year: 2022
    authors: Jason Hu, Brigitte Pientka, Ulrich Schöpp
    pdf: https://arxiv.org/pdf/2206.02831.pdf
    doi: https://dl.acm.org/doi/10.1145/3545115
    bibtex: |
      @article{hu_category_2022,
        title = {A {Category} {Theoretic} {View} of {Contextual} {Types}: from {Simple} {Types} to {Dependent} {Types}},
        issn = {1529-3785},
        shorttitle = {A {Category} {Theoretic} {View} of {Contextual} {Types}},
        url = {https://doi.org/10.1145/3545115},
        doi = {10.1145/3545115},
        abstract = {We describe the categorical semantics for a simply typed variant and a simplified dependently typed variant of Cocon, a contextual modal type theory where the box modality mediates between the weak function space that is used to represent higher-order abstract syntax (HOAS) trees and the strong function space that describes (recursive) computations about them. What makes Cocon different from standard type theories is the presence of first-class contexts and contextual objects to describe syntax trees that are closed with respect to a given context of assumptions. Following M. Hofmann’s work, we use a presheaf model to characterise HOAS trees. Surprisingly, this model already provides the necessary structure to also model Cocon. In particular, we can capture the contextual objects of Cocon using a comonad ♭ that restricts presheaves to their closed elements. This gives a simple semantic characterisation of the invariants of contextual types (e.g. substitution invariance) and identifies Cocon as a type-theoretic syntax of presheaf models. We further extend this characterisation to dependent types using categories with families and show that we can model a fragment of Cocon without recursor in the Fitch-style dependent modal type theory presented by Birkedal et. al..},
        urldate = {2022-06-30},
        journal = {ACM Transactions on Computational Logic},
        author = {Hu, Jason Z. S. and Pientka, Brigitte and Schöpp, Ulrich},
        month = may,
        year = {2022},
        note = {Just Accepted},
        keywords = {category theory, contextual types, dependent types, type theory},
        }
        
  - title: Formalizing of Category Theory in Agda
    appearance: CPP'21
    year: 2021
    authors: Jason Hu and Jacques Carette
    artifact: https://github.com/agda/agda-categories
    pdf: /asset/papers/cpp21.pdf
    slides: /asset/slides/cpp21.pdf
    talk: https://youtu.be/a2txkoybw2M
    doi: https://dl.acm.org/doi/10.1145/3437992.3439922
    bibtex: |
      @inproceedings{10.1145/3437992.3439922,
      author = {Hu, Jason Z. S. and Carette, Jacques},
      title = {Formalizing Category Theory in Agda},
      year = {2021},
      isbn = {9781450382991},
      publisher = {Association for Computing Machinery},
      address = {New York, NY, USA},
      url = {https://doi.org/10.1145/3437992.3439922},
      doi = {10.1145/3437992.3439922},
      abstract = {The generality and pervasiveness of category theory in modern mathematics makes it a frequent and useful target of formalization. It is however quite challenging to formalize, for a variety of reasons. Agda currently (i.e. in 2020) does not have a standard, working formalization of category theory. We document our work on solving this dilemma. The formalization revealed a number of potential design choices, and we present, motivate and explain the ones we picked. In particular, we find that alternative definitions or alternative proofs from those found in standard textbooks can be advantageous, as well as "fit" Agda's type theory more smoothly. Some definitions regarded as equivalent in standard textbooks turn out to make different "universe level" assumptions, with some being more polymorphic than others. We also pay close attention to engineering issues so that the library integrates well with Agda's own standard library, as well as being compatible with as many of supported type theories in Agda as possible.},
      booktitle = {Proceedings of the 10th ACM SIGPLAN International Conference on Certified Programs and Proofs},
      pages = {327–342},
      numpages = {16},
      keywords = {formal mathematics, Agda, category theory},
      location = {Virtual, Denmark},
      series = {CPP 2021}
      }

  - title: Undecidability of D<sub>&lt;:</sub> and Its Decidable Fragments （优秀论文）
    appearance: POPL'20
    year: 2020
    authors: Jason Hu and Ondřej Lhoták
    artifact: /popl20-artifact/
    doi: https://doi.org/10.1145/3371077
    pdf: /asset/papers/popl20.pdf
    slides: /asset/slides/popl20.pdf
    talk: https://youtu.be/7CO-zPV8Lko
    bibtex: |
      @article{10.1145/3371077,
      author = {Hu, Jason Z. S. and Lhot\'{a}k, Ond\v{r}ej},
      title = {Undecidability of D<: And Its Decidable Fragments},
      year = {2019},
      issue_date = {January 2020},
      publisher = {Association for Computing Machinery},
      address = {New York, NY, USA},
      volume = {4},
      number = {POPL},
      url = {https://doi.org/10.1145/3371077},
      doi = {10.1145/3371077},
      journal = {Proc. ACM Program. Lang.},
      month = dec,
      articleno = {Article 9},
      numpages = {30},
      keywords = {Algorithmic Typing, Dependent Object Types, Undecidability, $D_{<:}$}
      }
      
teaching:
  - school: 麦吉尔大学
    location: 加拿大，魁北克省，蒙特利尔
    position: 助教
    span:
      from:
        month: 9
        year: 2019
      to: present
    description: >-
      COMP 360, Algorithm Design （算法设计）

      COMP 302, Programming Languages and Paradigms （编程语言和范式）

      COMP 527, Logic and Computation （逻辑和计算）

      COMP 523, Language-based Security （基于语言的安全）
      
  - school : 滑铁卢大学
    location: 加拿大，安大略省，滑铁卢
    position: 助教 / Instructional Apprendice
    span:
      from:
        month: 9
        year: 2017
      to: present
    description: >-
      CS 241, Foundation of Sequentual Programs （顺序编程基础）
      
      CS 343, Concurrent and Parallel Programming （并发和并行编程）

activities:
  - kind: Conference
    name: POPL 2023
    period: 2022 秋天
    position: artifact evaluation committee member
  - kind: Conference
    name: ICFP 2021
    period: 2021 夏天
    position: artifact evaluation committee member
  - kind: Spring school
    name: HoTT Spring School (EPIT)
    period: 2021
    position: 学生
  - kind: Conference
    name: ICFP 2020
    period: 2020 夏天
    position: artifact evaluation committee member
  - kind: Conference
    name: POPL 2020
    period: 01/19/2020-01/25/2020
    position: 学生志愿者
  - kind: Summer school
    name: Oregon Programming Languages Summer School
    position: 学生
    period: 2019
    description: 带奖学金
  - kind: Summer school
    name: DeepSpec Summer School
    position: 学生
    period: 2018
    description: 带奖学金

industry:
  - company: 亚马逊云科技
    location: 美国，明尼苏达，明尼亚波利斯
    position: Applied Scientist Intern
    span:
      from:
        month: 5
        year: 2023
      to:
        month: 8
        year: 2023
  - company: 亚马逊云科技
    location: 美国，麻省，波士顿
    position: Applied Scientist Intern
    span:
      from:
        month: 6
        year: 2022
      to:
        month: 9
        year: 2022
  - company: 亚马逊云科技
    location: 加拿大，魁北克省，蒙特利尔
    position: Applied Scientist Intern
    span:
      from:
        month: 5
        year: 2020
      to:
        month: 8
        year: 2020
  - company: 摩根士丹利
    location: 加拿大，魁北克省，蒙特利尔
    position: Summer Analyst Intern
    span:
      from:
        month: 5
        year: 2018
      to:
        month: 8
        year: 2018
  - company: 摩根士丹利
    location: 加拿大，魁北克省，蒙特利尔
    position: Java / Scala Developer
    span:
      from:
        month: 10
        year: 2015
      to:
        month: 7
        year: 2017
  - company: Nexsan Technologies
    location: 加拿大，魁北克省，Dorval
    position: Software Developer
    span:
      from:
        month: 8
        year: 2014
      to:
        month: 10
        year: 2015
  - company: 国双科技
    location: 上海
    position: .Net实习工程师
    span:
      from:
        month: 5
        year: 2014
      to:
        month: 6
        year: 2014
  - company: Virtuos
    location: 上海
    position: QA实习
    span:
      from:
        month: 7
        year: 2013
      to:
        month: 8
        year: 2013

scholarships:
  - name: Postgraduate Scholarships-Doctoral
    issuer: Natural Sciences and Engineering Research Council (NSERC)
    accepted: true
    span:
      from:
        month: 9
        year: 2020
      to:
        month: 8
        year: 2023

  - name: Doctoral (B2X) Research Scholarship
    issuer: Fonds de recherche du Québec - Nature et technologies (FRQNT)
    accepted: true
    span:
      from:
        month: 9
        year: 2020
      to:
        month: 8
        year: 2024
  - name: Trottier Accelerator Award
    issuer: School of Computer Science, McGill University
    accepted: true
    span:
      from:
        month: 9
        year: 2020
      to:
        month: 8
        year: 2022
  - name: the Charity Exercise Award
    issuer: School of Computer Science, McGill University
    accepted: true
    span:
      from:
        month: 1
        year: 2020
      to:
        month: 4
        year: 2020

others: >-
  我有时后会在知乎回答编程语言相关的问题。欢迎关注我的知乎帐号（链接在上面）。

  讲四门语言。英语较优，雅思8.5；日语一般，日常听说读没啥障碍。

  <a href="https://en.wikipedia.org/wiki/Foshan">佛山</a>人；不，我不会打<a
  href="https://en.wikipedia.org/wiki/Wing_Chun">咏春</a>。
      
  我喜欢玩电子游戏，打羽毛球和看电影。但是读硕以后基本没有闲暇功夫了。
